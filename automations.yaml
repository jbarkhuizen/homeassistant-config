- id: '1717429630744'
  alias: Prepaid meter recharge
  description: ''
  trigger:
  - platform: state
    entity_id:
    - input_number.prepaid_meter_units
  condition:
  - condition: template
    value_template: '{{ states(''input_number.prepaid_meter_units'') | float > 0 }}'
  actions:
  - action: input_number.set_value
    metadata: {}
    data:
      value: '{{ ((states(''sensor.deyeinvertermaster_summary_total_grid_import_buy'')
        | float(6))  * 1000.0) }}'
    target:
      entity_id: input_number.prepaid_meter_inverter_total_units
  mode: single
- id: notify_low_battery_email
  alias: Notify Low Battery via Email and UI
  description: Send email and UI alert if any battery is 30% or lower at 09:00
  trigger:
  - platform: time
    at: 09:00:00
  condition:
  - condition: template
    value_template: "{% set sensors = [\n  'sensor.sonoff_1002357bda_battery',\n  'sensor.sonoff_1002357619_battery',\n
      \ 'sensor.sonoff_a48005596e_battery',\n  'sensor.sonoff_a480098890_battery'\n]
      %} {% set low = sensors | selectattr('state', 'defined') | selectattr('state',
      'int') | select('int', '<=', 30) | list %} {{ low | length > 0 }}\n"
  action:
  - variables:
      sensor_list:
      - name: 5 Door Sensor
        id: sensor.sonoff_1002357bda_battery
      - name: Study Window 1
        id: sensor.sonoff_1002357619_battery
      - name: Gang Motion Sensor
        id: sensor.sonoff_a48005596e_battery
      - name: Front Door Sensor
        id: sensor.sonoff_a480098890_battery
      low_batteries: "{% set report = [] %} {% for s in sensor_list %}\n  {% set level
        = states(s.id) | int %}\n  {% if level <= 30 %}\n    {% set icon = '\U0001F50B'
        %}\n    {% if level <= 10 %}\n      {% set color = '\U0001F7E5' %}\n    {%
        elif level <= 20 %}\n      {% set color = '\U0001F7E7' %}\n    {% elif level
        <= 30 %}\n      {% set color = '\U0001F7E8' %}\n    {% else %}\n      {% set
        color = '\U0001F7E9' %}\n    {% endif %}\n    {% set report = report + [color
        ~ ' ' ~ icon ~ ' ' ~ s.name ~ ': ' ~ level ~ '%'] %}\n  {% endif %}\n{% endfor
        %} {{ report }}\n"
  - service: notify.email
    data:
      title: "\U0001F50B Low Battery Alert"
      message: "{% if low_batteries %}\n  The following sensors have low battery levels:\\n\\n{{
        low_batteries | join('\\n') }}\n{% else %}\n  All monitored sensors are above
        30%.\n{% endif %}\n"
  - service: persistent_notification.create
    data:
      title: "\U0001F50B Low Battery Alert"
      message: "{% if low_batteries %}\n  The following sensors have low battery levels:\\n\\n{{
        low_batteries | join('\\n') }}\n{% else %}\n  All monitored sensors are above
        30%.\n{% endif %}\n"
- id: network_downtime_alert
  alias: Network Downtime Alert
  description: Send email when MetroFibre router goes offline
  trigger:
  - platform: state
    entity_id: binary_sensor.metrofibre_router
    to: 'off'
    for: 00:00:30
  condition:
  - condition: state
    entity_id: input_boolean.network_monitoring_enabled
    state: 'on'
  action:
  - service: notify.email
    data:
      to: jbarkhuizen@gmail.com
      title: "\U0001F6A8 Network Downtime Alert"
      message: "MetroFibre Router at 192.168.1.1 is OFFLINE as of {{ now().strftime('%Y-%m-%d
        %H:%M:%S') }}.\nSpeed Test Results (last known): - Download: {{ states('sensor.speedtest_download')
        }} Mbps - Upload: {{ states('sensor.speedtest_upload') }} Mbps - Ping: {{
        states('sensor.speedtest_ping') }} ms\nNetwork Device Status: - TP-Link EAP245
        (192.168.1.3): {{ 'Online' if is_state('binary_sensor.tplink_eap245', 'on')
        else 'Offline' }} - Netgear Genie (192.168.1.4): {{ 'Online' if is_state('binary_sensor.netgear_genie',
        'on') else 'Offline' }} - TP-Link Archer D2 (192.168.1.5): {{ 'Online' if
        is_state('binary_sensor.tplinl_archer_d2', 'on') else 'Offline' }} - TP-Link
        EAP225 Outdoor (192.168.1.8): {{ 'Online' if is_state('binary_sensor.tplink_eap225_outdoo',
        'on') else 'Offline' }} - Netgear GS728TP Switch (192.168.1.9): {{ 'Online'
        if is_state('binary_sensor.netgear_gs728tp', 'on') else 'Offline' }}          \n"
- id: network_recovery_alert
  alias: Network Recovery Alert
  description: Send email when MetroFibre router comes back online
  trigger:
  - platform: state
    entity_id: binary_sensor.metrofibre_router
    to: 'on'
    for: 00:01:00
  condition:
  - condition: state
    entity_id: input_boolean.network_monitoring_enabled
    state: 'on'
  action:
  - service: notify.email
    data:
      to: jbarkhuizen@gmail.com
      title: ✅ Network Recovery Alert
      message: "MetroFibre Router at 192.168.1.1 is back ONLINE as of {{ now().strftime('%Y-%m-%d
        %H:%M:%S') }}.\nDowntime duration: {{ ((as_timestamp(now()) - as_timestamp(state_attr('binary_sensor.metrofibre_router',
        'last_changed'))) / 60) | round(1) }} minutes  \n  \n"
- id: network_degradation_alert
  alias: Speed Degradation Alert
  description: Alert when internet speed drops significantly
  trigger:
  - platform: state
    entity_id: sensor.speedtest_download
  - platform: state
    entity_id: sensor.speedtest_upload
  condition:
  - condition: template
    value_template: "{{ states('sensor.speedtest_download') | float(0) < 250 or \n
      \  states('sensor.speedtest_upload') | float(0) < 250 }}\n"
  - condition: template
    value_template: "{{ has_value('sensor.speedtest_download') and \n   has_value('sensor.speedtest_upload')
      }}\n"
  - condition: state
    entity_id: input_boolean.network_monitoring_enabled
    state: 'on'
  action:
  - service: notify.email
    data:
      to: jbarkhuizen@gmail.com
      title: ⚠️ Internet Speed Degradation
      message: "Internet speed has dropped below 50% of expected performance:\n \n
        \ Current Results:\n  - Download: {{ states('sensor.speedtest_download') }}
        Mbps (Expected: 500 Mbps)\n  - Upload: {{ states('sensor.speedtest_upload')
        }} Mbps (Expected: 500 Mbps)\n  - Ping: {{ states('sensor.speedtest_ping')
        }} ms\n  \n  Tested at: {{ now().strftime('%Y-%m-%d %H:%M:%S') }}            \n
        \ \n"
- id: network_device_offline_alert
  alias: Network Device Offline Alert
  description: Alert when any network device goes offline
  trigger:
  - platform: state
    entity_id:
    - binary_sensor.tplink_eap245_ping
    - binary_sensor.netgear_genie_ping
    - binary_sensor.tplinl_archer_d2_ping
    - binary_sensor.tplink_eap225_outdoor_ping
    - binary_sensor.netgear_gs728tp_ping
    to: 'off'
    for: 00:02:00
  condition:
  - condition: state
    entity_id: input_boolean.network_monitoring_enabled
    state: 'on'
  action:
  - service: notify.email
    data:
      to: jbarkhuizen@gmail.com
      title: ⚠️ Network Device Offline
      message: "Network device {{ trigger.to_state.attributes.friendly_name }} at
        {{ trigger.to_state.attributes.ip_address | default('unknown IP') }} went
        offline at {{ now().strftime('%Y-%m-%d %H:%M:%S') }}.\nDevice: {{ trigger.to_state.attributes.friendly_name
        }}\nOverall Network Health: {{ states('sensor.network_status_summary') }}%
        \          \n"
- id: tuya_battery_power_saving
  alias: Tuya Battery Power Saving Mode
  trigger:
  - platform: time_pattern
    minutes: /10
  condition:
  - condition: state
    entity_id: input_boolean.battery_power_saving_mode
    state: 'on'
  action:
  - service: homeassistant.update_entity
    target:
      entity_id:
      - sensor.sonoff_a4800986dd_temperature
      - sensor.sonoff_a4800986dd_humidity
      - sensor.sonoff_a4800986dd_battery
      - sensor.sonoff_a48008e4cc_battery
      - sensor.sonoff_a48008e4cc_humidity
      - sensor.sonoff_a48008e4cc_temperature
      - sensor.study_temperature_humidity_sensor_battery
      - sensor.braai_afdak_temperature_humidity_sensor_battery
      - sensor.sonoff_a4800d7025_battery
      - sensor.sonoff_1002357619_battery
- id: daily_energy_report
  alias: Final Daily Energy Report
  description: Send comprehensive daily energy usage and cost report via email
  triggers:
  - at: 08:00:00
    trigger: time
  conditions:
  - condition: template
    value_template: '{{ states(''sensor.energy_daily'') not in [''unknown'', ''unavailable'']
      }}'
  actions:
  - data:
      title: ⚡ Daily Energy Report - {{ now().strftime('%d %B %Y') }}
      message: "\U0001F4CA **DAILY ENERGY USAGE REPORT**\nDate: {{ now().strftime('%A,
        %d %B %Y') }}\nReport Time: {{ now().strftime('%H:%M') }}\n\n\U0001F50B **TODAY'S
        USAGE SUMMARY**\n• Energy Consumed: {{ states('sensor.energy_daily') | float(0)
        | round(2) }} kWh\n• Total Cost: R{{ states('sensor.energy_cost_daily') |
        float(0) | round(2) }}\n• Current Power Draw: {{ states('sensor.current_power_usage_kw')
        | float(0) | round(3) }} kW\n• Daily Comparison: {{ states('sensor.daily_usage_comparison')
        | float(0) | round(1) }}% vs yesterday\n\n\U0001F4B0 **COST BREAKDOWN**\n•
        Energy Cost: R{{ (states('sensor.energy_daily') | float(0) * states('input_number.electricity_rate')
        | float(0)) | round(2) }}\n• Connection Fee: R{{ states('input_number.daily_connection_fee')
        | float(0) | round(2) }}\n• Rate per kWh: R{{ states('input_number.electricity_rate')
        | float(0) }}\n\n\U0001F3E0 **INVERTER STATUS**\n• Master Battery SOC: {{
        states('sensor.deyeinvertermaster_battery_soc') | float(0) | round(1) }}%\n•
        Slave Battery SOC: {{ states('sensor.deyeinverterslave_battery_soc') | float(0)
        | round(1) }}%\n• Grid Import: {{ states('sensor.deyeinvertermaster_summary_total_grid_import_buy')
        | float(0) | round(2) }} kWh\n• Grid Export: {{ states('sensor.deyeinvertermaster_summary_total_grid_export_sell')
        | float(0) | round(2) }} kWh\n\n\U0001F4C8 **WEEKLY OVERVIEW**\n• Weekly Usage:
        {{ states('sensor.energy_weekly') | float(0) | round(2) }} kWh\n• Weekly Cost:
        R{{ states('sensor.energy_cost_weekly') | float(0) | round(2) }}\n• Daily
        Average: {{ (states('sensor.energy_weekly') | float(0) / 7) | round(2) }}
        kWh/day\n\n\U0001F4C5 **MONTHLY OVERVIEW**\n• Monthly Usage: {{ states('sensor.energy_monthly')
        | float(0) | round(2) }} kWh\n• Monthly Cost: R{{ states('sensor.energy_cost_monthly')
        | float(0) | round(2) }}\n• Monthly Comparison: {{ states('sensor.monthly_usage_comparison')
        | float(0) | round(1) }}% vs last month\n• Projected Annual Cost: R{{ (states('sensor.energy_cost_monthly')
        | float(0) * 12) | round(2) }}\n\n\U0001F3AF **EFFICIENCY METRICS**\n• Average
        Daily Usage: {{ (states('sensor.energy_monthly') | float(0) / now().day) |
        round(2) }} kWh/day\n• Projected Monthly Cost: R{{ states('sensor.projected_monthly_cost')
        | float(0) | round(2) }}\n\n---\nGenerated by Home Assistant Energy Monitoring
        System\nNetwork: {{ states('sensor.speedtest_download') }}↓ / {{ states('sensor.speedtest_upload')
        }}↑ Mbps\n"
    action: notify.email
  mode: single
- id: final_daily_energy_report
  alias: Final Daily Energy Report
  description: Send comprehensive daily energy usage and cost report via email
  triggers:
  - at: 08:00:00
    trigger: time
  conditions:
  - condition: template
    value_template: '{{ states(''sensor.energy_daily'') not in [''unknown'', ''unavailable'']
      }}'
  actions:
  - data:
      title: ⚡ Daily Energy Report - {{ now().strftime('%d %B %Y') }}
      message: "\U0001F4CA **DAILY ENERGY USAGE REPORT**\nDate: {{ now().strftime('%A,
        %d %B %Y') }}\nReport Time: {{ now().strftime('%H:%M') }}\n\n\U0001F50B **TODAY'S
        USAGE SUMMARY**\n• Energy Consumed: {{ states('sensor.energy_daily') | float(0)
        | round(2) }} kWh\n• Total Cost: R{{ states('sensor.energy_cost_daily') |
        float(0) | round(2) }}\n• Current Power Draw: {{ states('sensor.current_power_usage_kw')
        | float(0) | round(3) }} kW\n• Daily Comparison: {{ states('sensor.daily_usage_comparison')
        | float(0) | round(1) }}% vs yesterday\n\n\U0001F4B0 **COST BREAKDOWN**\n•
        Energy Cost: R{{ (states('sensor.energy_daily') | float(0) * states('input_number.electricity_rate')
        | float(0)) | round(2) }}\n• Connection Fee: R{{ states('input_number.daily_connection_fee')
        | float(0) | round(2) }}\n• Rate per kWh: R{{ states('input_number.electricity_rate')
        | float(0) }}\n\n\U0001F3E0 **INVERTER STATUS**\n• Master Battery SOC: {{
        states('sensor.deyeinvertermaster_battery_soc') | float(0) | round(1) }}%\n•
        Slave Battery SOC: {{ states('sensor.deyeinverterslave_battery_soc') | float(0)
        | round(1) }}%\n• Grid Import: {{ states('sensor.deyeinvertermaster_summary_total_grid_import_buy')
        | float(0) | round(2) }} kWh\n• Grid Export: {{ states('sensor.deyeinvertermaster_summary_total_grid_export_sell')
        | float(0) | round(2) }} kWh\n\n\U0001F4C8 **WEEKLY OVERVIEW**\n• Weekly Usage:
        {{ states('sensor.energy_weekly') | float(0) | round(2) }} kWh\n• Weekly Cost:
        R{{ states('sensor.energy_cost_weekly') | float(0) | round(2) }}\n• Daily
        Average: {{ (states('sensor.energy_weekly') | float(0) / 7) | round(2) }}
        kWh/day\n\n\U0001F4C5 **MONTHLY OVERVIEW**\n• Monthly Usage: {{ states('sensor.energy_monthly')
        | float(0) | round(2) }} kWh\n• Monthly Cost: R{{ states('sensor.energy_cost_monthly')
        | float(0) | round(2) }}\n• Monthly Comparison: {{ states('sensor.monthly_usage_comparison')
        | float(0) | round(1) }}% vs last month\n• Projected Annual Cost: R{{ (states('sensor.energy_cost_monthly')
        | float(0) * 12) | round(2) }}\n\n\U0001F3AF **EFFICIENCY METRICS**\n• Average
        Daily Usage: {{ (states('sensor.energy_monthly') | float(0) / now().day) |
        round(2) }} kWh/day\n• Projected Monthly Cost: R{{ states('sensor.projected_monthly_cost')
        | float(0) | round(2) }}\n\n---\nGenerated by Home Assistant Energy Monitoring
        System\nNetwork: {{ states('sensor.speedtest_download') }}↓ / {{ states('sensor.speedtest_upload')
        }}↑ Mbps\n"
    action: notify.email
  mode: single
