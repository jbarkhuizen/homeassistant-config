#----------------------------------------------------------------------------------------------------------------------
# Utility Meters for Energy Tracking - USING EXISTING EFERGY SENSORS
# Updated by Claude.ai on 05 August 2025 - Uses existing Efergy energy sensors
#----------------------------------------------------------------------------------------------------------------------
utility_meter:
  # Below Sensors is applicable to the Sunsynk Inverters
  master_energy_battery_charge_grid:
    name: deyeinvertermaster_summary_day_battery_charge_grid
    source: sensor.deyeinvertermaster_summary_total_battery_charge_grid
    cycle: daily

  slave_energy_battery_charge_grid:
    name: deyeinverterslave_summary_day_battery_charge_grid
    source: sensor.deyeinverterslave_summary_total_battery_charge_grid
    cycle: daily

#----------------------------------------------------------------------------------------------------------------------
# Create sensor.energy_daily as an alias to existing Efergy sensor
# This creates the missing sensor.energy_daily that your automations need
#----------------------------------------------------------------------------------------------------------------------
template:
  - sensor:
    # Create sensor.energy_daily using existing Efergy sensor
    - name: "Energy Daily"
      state: "{{ states('sensor.efergy_daily_consumption') }}"
      unit_of_measurement: "kWh"
      device_class: energy
      state_class: total_increasing
      icon: mdi:flash

    # Create sensor.energy_weekly (if needed)
    - name: "Energy Weekly"
      state: "{{ states('sensor.efergy_weekly_consumption') | default('0') }}"
      unit_of_measurement: "kWh"
      device_class: energy
      state_class: total_increasing
      icon: mdi:flash

    # Create sensor.energy_monthly using existing Efergy sensor
    - name: "Energy Monthly"
      state: "{{ states('sensor.efergy_monthly_consumption') }}"
      unit_of_measurement: "kWh"
      device_class: energy
      state_class: total_increasing
      icon: mdi:flash

    # Create sensor.energy_yearly using existing Efergy sensor
    - name: "Energy Yearly"
      state: "{{ states('sensor.efergy_yearly_consumption') }}"
      unit_of_measurement: "kWh"
      device_class: energy
      state_class: total_increasing
      icon: mdi:flash

    # Create hourly and quarterly if needed
    - name: "Energy Hourly"
      state: >
        {% set daily = states('sensor.efergy_daily_consumption') | float %}
        {% set hour = now().hour %}
        {{ (daily / 24 * (hour + 1)) | round(2) }}
      unit_of_measurement: "kWh"
      device_class: energy
      icon: mdi:flash

    - name: "Energy Quarterly"
      state: >
        {% set yearly = states('sensor.efergy_yearly_consumption') | float %}
        {% set quarter = ((now().month - 1) // 3) + 1 %}
        {{ (yearly / 4 * quarter) | round(2) }}
      unit_of_measurement: "kWh"
      device_class: energy
      icon: mdi:flash